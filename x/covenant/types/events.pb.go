// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: scalar/covenant/v1beta1/events.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	exported "github.com/scalarorg/scalar-core/x/covenant/exported"
	github_com_scalarorg_scalar_core_x_multisig_exported "github.com/scalarorg/scalar-core/x/multisig/exported"
	github_com_scalarorg_scalar_core_x_nexus_exported "github.com/scalarorg/scalar-core/x/nexus/exported"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SigningPsbtStarted struct {
	Module           string                                                                    `protobuf:"bytes,1,opt,name=module,proto3" json:"module,omitempty"`
	Chain            github_com_scalarorg_scalar_core_x_nexus_exported.ChainName               `protobuf:"bytes,2,opt,name=chain,proto3,casttype=github.com/scalarorg/scalar-core/x/nexus/exported.ChainName" json:"chain,omitempty"`
	SigID            uint64                                                                    `protobuf:"varint,3,opt,name=sig_id,json=sigId,proto3" json:"sig_id,omitempty"`
	KeyID            github_com_scalarorg_scalar_core_x_multisig_exported.KeyID                `protobuf:"bytes,4,opt,name=key_id,json=keyId,proto3,casttype=github.com/scalarorg/scalar-core/x/multisig/exported.KeyID" json:"key_id,omitempty"`
	PubKeys          map[string]github_com_scalarorg_scalar_core_x_multisig_exported.PublicKey `protobuf:"bytes,5,rep,name=pub_keys,json=pubKeys,proto3,castvalue=github.com/scalarorg/scalar-core/x/multisig/exported.PublicKey" json:"pub_keys,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	RequestingModule string                                                                    `protobuf:"bytes,6,opt,name=requesting_module,json=requestingModule,proto3" json:"requesting_module,omitempty"`
	Psbt             Psbt                                                                      `protobuf:"bytes,7,opt,name=psbt,proto3,casttype=Psbt" json:"psbt,omitempty"`
}

func (m *SigningPsbtStarted) Reset()         { *m = SigningPsbtStarted{} }
func (m *SigningPsbtStarted) String() string { return proto.CompactTextString(m) }
func (*SigningPsbtStarted) ProtoMessage()    {}
func (*SigningPsbtStarted) Descriptor() ([]byte, []int) {
	return fileDescriptor_1539e454966a6a42, []int{0}
}
func (m *SigningPsbtStarted) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SigningPsbtStarted) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SigningPsbtStarted) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SigningPsbtStarted.Merge(m, src)
}
func (m *SigningPsbtStarted) XXX_Size() int {
	return m.Size()
}
func (m *SigningPsbtStarted) XXX_DiscardUnknown() {
	xxx_messageInfo_SigningPsbtStarted.DiscardUnknown(m)
}

var xxx_messageInfo_SigningPsbtStarted proto.InternalMessageInfo

func (m *SigningPsbtStarted) GetModule() string {
	if m != nil {
		return m.Module
	}
	return ""
}

func (m *SigningPsbtStarted) GetChain() github_com_scalarorg_scalar_core_x_nexus_exported.ChainName {
	if m != nil {
		return m.Chain
	}
	return ""
}

func (m *SigningPsbtStarted) GetSigID() uint64 {
	if m != nil {
		return m.SigID
	}
	return 0
}

func (m *SigningPsbtStarted) GetKeyID() github_com_scalarorg_scalar_core_x_multisig_exported.KeyID {
	if m != nil {
		return m.KeyID
	}
	return ""
}

func (m *SigningPsbtStarted) GetPubKeys() map[string]github_com_scalarorg_scalar_core_x_multisig_exported.PublicKey {
	if m != nil {
		return m.PubKeys
	}
	return nil
}

func (m *SigningPsbtStarted) GetRequestingModule() string {
	if m != nil {
		return m.RequestingModule
	}
	return ""
}

func (m *SigningPsbtStarted) GetPsbt() Psbt {
	if m != nil {
		return m.Psbt
	}
	return nil
}

type SigningPsbtCompleted struct {
	Module string `protobuf:"bytes,1,opt,name=module,proto3" json:"module,omitempty"`
	SigID  uint64 `protobuf:"varint,2,opt,name=sig_id,json=sigId,proto3" json:"sig_id,omitempty"`
}

func (m *SigningPsbtCompleted) Reset()         { *m = SigningPsbtCompleted{} }
func (m *SigningPsbtCompleted) String() string { return proto.CompactTextString(m) }
func (*SigningPsbtCompleted) ProtoMessage()    {}
func (*SigningPsbtCompleted) Descriptor() ([]byte, []int) {
	return fileDescriptor_1539e454966a6a42, []int{1}
}
func (m *SigningPsbtCompleted) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SigningPsbtCompleted) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SigningPsbtCompleted.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SigningPsbtCompleted) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SigningPsbtCompleted.Merge(m, src)
}
func (m *SigningPsbtCompleted) XXX_Size() int {
	return m.Size()
}
func (m *SigningPsbtCompleted) XXX_DiscardUnknown() {
	xxx_messageInfo_SigningPsbtCompleted.DiscardUnknown(m)
}

var xxx_messageInfo_SigningPsbtCompleted proto.InternalMessageInfo

func (m *SigningPsbtCompleted) GetModule() string {
	if m != nil {
		return m.Module
	}
	return ""
}

func (m *SigningPsbtCompleted) GetSigID() uint64 {
	if m != nil {
		return m.SigID
	}
	return 0
}

type SigningPsbtExpired struct {
	Module string `protobuf:"bytes,1,opt,name=module,proto3" json:"module,omitempty"`
	SigID  uint64 `protobuf:"varint,2,opt,name=sig_id,json=sigId,proto3" json:"sig_id,omitempty"`
}

func (m *SigningPsbtExpired) Reset()         { *m = SigningPsbtExpired{} }
func (m *SigningPsbtExpired) String() string { return proto.CompactTextString(m) }
func (*SigningPsbtExpired) ProtoMessage()    {}
func (*SigningPsbtExpired) Descriptor() ([]byte, []int) {
	return fileDescriptor_1539e454966a6a42, []int{2}
}
func (m *SigningPsbtExpired) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SigningPsbtExpired) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SigningPsbtExpired.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SigningPsbtExpired) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SigningPsbtExpired.Merge(m, src)
}
func (m *SigningPsbtExpired) XXX_Size() int {
	return m.Size()
}
func (m *SigningPsbtExpired) XXX_DiscardUnknown() {
	xxx_messageInfo_SigningPsbtExpired.DiscardUnknown(m)
}

var xxx_messageInfo_SigningPsbtExpired proto.InternalMessageInfo

func (m *SigningPsbtExpired) GetModule() string {
	if m != nil {
		return m.Module
	}
	return ""
}

func (m *SigningPsbtExpired) GetSigID() uint64 {
	if m != nil {
		return m.SigID
	}
	return 0
}

type TapScriptSigsSubmitted struct {
	Module           string                                        `protobuf:"bytes,1,opt,name=module,proto3" json:"module,omitempty"`
	SigID            uint64                                        `protobuf:"varint,2,opt,name=sig_id,json=sigId,proto3" json:"sig_id,omitempty"`
	Participant      github_com_cosmos_cosmos_sdk_types.ValAddress `protobuf:"bytes,3,opt,name=participant,proto3,casttype=github.com/cosmos/cosmos-sdk/types.ValAddress" json:"participant,omitempty"`
	TapScriptSigsMap *exported.TapScriptSigsMap                    `protobuf:"bytes,4,opt,name=tap_script_sigs_map,json=tapScriptSigsMap,proto3" json:"tap_script_sigs_map,omitempty"`
}

func (m *TapScriptSigsSubmitted) Reset()         { *m = TapScriptSigsSubmitted{} }
func (m *TapScriptSigsSubmitted) String() string { return proto.CompactTextString(m) }
func (*TapScriptSigsSubmitted) ProtoMessage()    {}
func (*TapScriptSigsSubmitted) Descriptor() ([]byte, []int) {
	return fileDescriptor_1539e454966a6a42, []int{3}
}
func (m *TapScriptSigsSubmitted) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TapScriptSigsSubmitted) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TapScriptSigsSubmitted.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TapScriptSigsSubmitted) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TapScriptSigsSubmitted.Merge(m, src)
}
func (m *TapScriptSigsSubmitted) XXX_Size() int {
	return m.Size()
}
func (m *TapScriptSigsSubmitted) XXX_DiscardUnknown() {
	xxx_messageInfo_TapScriptSigsSubmitted.DiscardUnknown(m)
}

var xxx_messageInfo_TapScriptSigsSubmitted proto.InternalMessageInfo

func (m *TapScriptSigsSubmitted) GetModule() string {
	if m != nil {
		return m.Module
	}
	return ""
}

func (m *TapScriptSigsSubmitted) GetSigID() uint64 {
	if m != nil {
		return m.SigID
	}
	return 0
}

func (m *TapScriptSigsSubmitted) GetParticipant() github_com_cosmos_cosmos_sdk_types.ValAddress {
	if m != nil {
		return m.Participant
	}
	return nil
}

func (m *TapScriptSigsSubmitted) GetTapScriptSigsMap() *exported.TapScriptSigsMap {
	if m != nil {
		return m.TapScriptSigsMap
	}
	return nil
}

type KeyRotated struct {
	Module string                                                      `protobuf:"bytes,1,opt,name=module,proto3" json:"module,omitempty"`
	Chain  github_com_scalarorg_scalar_core_x_nexus_exported.ChainName `protobuf:"bytes,2,opt,name=chain,proto3,casttype=github.com/scalarorg/scalar-core/x/nexus/exported.ChainName" json:"chain,omitempty"`
	KeyID  github_com_scalarorg_scalar_core_x_multisig_exported.KeyID  `protobuf:"bytes,3,opt,name=key_id,json=keyId,proto3,casttype=github.com/scalarorg/scalar-core/x/multisig/exported.KeyID" json:"key_id,omitempty"`
}

func (m *KeyRotated) Reset()         { *m = KeyRotated{} }
func (m *KeyRotated) String() string { return proto.CompactTextString(m) }
func (*KeyRotated) ProtoMessage()    {}
func (*KeyRotated) Descriptor() ([]byte, []int) {
	return fileDescriptor_1539e454966a6a42, []int{4}
}
func (m *KeyRotated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KeyRotated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KeyRotated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KeyRotated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyRotated.Merge(m, src)
}
func (m *KeyRotated) XXX_Size() int {
	return m.Size()
}
func (m *KeyRotated) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyRotated.DiscardUnknown(m)
}

var xxx_messageInfo_KeyRotated proto.InternalMessageInfo

func (m *KeyRotated) GetModule() string {
	if m != nil {
		return m.Module
	}
	return ""
}

func (m *KeyRotated) GetChain() github_com_scalarorg_scalar_core_x_nexus_exported.ChainName {
	if m != nil {
		return m.Chain
	}
	return ""
}

func (m *KeyRotated) GetKeyID() github_com_scalarorg_scalar_core_x_multisig_exported.KeyID {
	if m != nil {
		return m.KeyID
	}
	return ""
}

func init() {
	proto.RegisterType((*SigningPsbtStarted)(nil), "scalar.covenant.v1beta1.SigningPsbtStarted")
	proto.RegisterMapType((map[string]github_com_scalarorg_scalar_core_x_multisig_exported.PublicKey)(nil), "scalar.covenant.v1beta1.SigningPsbtStarted.PubKeysEntry")
	proto.RegisterType((*SigningPsbtCompleted)(nil), "scalar.covenant.v1beta1.SigningPsbtCompleted")
	proto.RegisterType((*SigningPsbtExpired)(nil), "scalar.covenant.v1beta1.SigningPsbtExpired")
	proto.RegisterType((*TapScriptSigsSubmitted)(nil), "scalar.covenant.v1beta1.TapScriptSigsSubmitted")
	proto.RegisterType((*KeyRotated)(nil), "scalar.covenant.v1beta1.KeyRotated")
}

func init() {
	proto.RegisterFile("scalar/covenant/v1beta1/events.proto", fileDescriptor_1539e454966a6a42)
}

var fileDescriptor_1539e454966a6a42 = []byte{
	// 634 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x54, 0xcb, 0x6e, 0xd3, 0x4c,
	0x18, 0xad, 0x73, 0x6b, 0x3b, 0xcd, 0xa2, 0xbf, 0xff, 0xaa, 0x44, 0x11, 0x8a, 0xa3, 0xc0, 0x22,
	0x12, 0xd4, 0x56, 0xca, 0xa6, 0x0a, 0x12, 0x08, 0xb7, 0x15, 0x8a, 0xa2, 0x56, 0x91, 0x0d, 0x2c,
	0x58, 0x60, 0x8d, 0xed, 0xd1, 0x74, 0x14, 0xdb, 0x33, 0x78, 0xc6, 0x51, 0xfc, 0x0a, 0x5d, 0xb1,
	0x83, 0x2d, 0x7b, 0x1e, 0x84, 0x65, 0x97, 0x48, 0x48, 0x01, 0xa5, 0x6f, 0x91, 0x15, 0xf2, 0xa5,
	0x4d, 0x7a, 0x43, 0x15, 0x15, 0x62, 0xe5, 0x6f, 0x3e, 0x1f, 0x9f, 0x39, 0xe3, 0x73, 0xbe, 0x01,
	0x0f, 0xb9, 0x03, 0x3d, 0x18, 0x6a, 0x0e, 0x1d, 0xa1, 0x00, 0x06, 0x42, 0x1b, 0x75, 0x6c, 0x24,
	0x60, 0x47, 0x43, 0x23, 0x14, 0x08, 0xae, 0xb2, 0x90, 0x0a, 0x2a, 0xdf, 0xcb, 0x50, 0xea, 0x19,
	0x4a, 0xcd, 0x51, 0xf5, 0x0d, 0x4c, 0x31, 0x4d, 0x31, 0x5a, 0x52, 0x65, 0xf0, 0xfa, 0x83, 0x9b,
	0x48, 0x45, 0xcc, 0x50, 0xce, 0x59, 0x7f, 0x7c, 0x19, 0x84, 0xc6, 0x8c, 0x86, 0x02, 0xb9, 0xd7,
	0xa1, 0x5b, 0x5f, 0x4a, 0x40, 0x36, 0x09, 0x0e, 0x48, 0x80, 0x07, 0xdc, 0x16, 0xa6, 0x80, 0x09,
	0x54, 0xde, 0x04, 0x15, 0x9f, 0xba, 0x91, 0x87, 0x6a, 0x52, 0x53, 0x6a, 0xaf, 0x1a, 0xf9, 0x4a,
	0x7e, 0x0d, 0xca, 0xce, 0x11, 0x24, 0x41, 0xad, 0x90, 0xb4, 0xf5, 0xe7, 0xb3, 0x89, 0xf2, 0x14,
	0x13, 0x71, 0x14, 0xd9, 0xaa, 0x43, 0x7d, 0x2d, 0xdb, 0x9a, 0x86, 0x38, 0xaf, 0xb6, 0x1c, 0x1a,
	0x22, 0x6d, 0xac, 0x05, 0x68, 0x1c, 0xf1, 0x73, 0x21, 0xea, 0x6e, 0x42, 0x71, 0x08, 0x7d, 0x64,
	0x64, 0x6c, 0x72, 0x13, 0x54, 0x38, 0xc1, 0x16, 0x71, 0x6b, 0xc5, 0xa6, 0xd4, 0x2e, 0xe9, 0xab,
	0xd3, 0x89, 0x52, 0x36, 0x09, 0xee, 0xed, 0x19, 0x65, 0x4e, 0x70, 0xcf, 0x95, 0xdf, 0x81, 0xca,
	0x10, 0xc5, 0x09, 0xa2, 0x94, 0xee, 0xfc, 0x32, 0x41, 0xf4, 0x51, 0xdc, 0xdb, 0x9b, 0x4d, 0x94,
	0xee, 0x2d, 0x24, 0xf8, 0x91, 0x27, 0x08, 0x27, 0x78, 0xae, 0x22, 0xfd, 0xda, 0x28, 0x0f, 0x51,
	0xdc, 0x73, 0xe5, 0x8f, 0x12, 0x58, 0x61, 0x91, 0x6d, 0x0d, 0x51, 0xcc, 0x6b, 0xe5, 0x66, 0xb1,
	0xbd, 0xb6, 0xbd, 0xa3, 0xde, 0xe0, 0x8e, 0x7a, 0xf5, 0x87, 0xa9, 0x83, 0xc8, 0xee, 0xa3, 0x98,
	0xef, 0x07, 0x22, 0x8c, 0x75, 0xfd, 0xf8, 0x87, 0xf2, 0xec, 0x8f, 0x34, 0x0d, 0x22, 0xdb, 0x23,
	0x4e, 0x1f, 0xc5, 0xc6, 0x32, 0xcb, 0x18, 0xe5, 0x47, 0xe0, 0xbf, 0x10, 0xbd, 0x8f, 0x10, 0x17,
	0x24, 0xc0, 0x56, 0xee, 0x4a, 0x25, 0x75, 0x65, 0x7d, 0xfe, 0xe2, 0x20, 0xf3, 0xe7, 0x3e, 0x28,
	0x31, 0x6e, 0x8b, 0xda, 0x72, 0x53, 0x6a, 0x57, 0xf5, 0x95, 0xd9, 0x44, 0x29, 0x25, 0x2a, 0x8d,
	0xb4, 0x5b, 0xef, 0x82, 0xea, 0xa2, 0x4e, 0x79, 0x1d, 0x14, 0x87, 0x28, 0xce, 0x2d, 0x4e, 0x4a,
	0x79, 0x03, 0x94, 0x47, 0xd0, 0x8b, 0x50, 0xea, 0x6f, 0xd5, 0xc8, 0x16, 0xdd, 0xc2, 0x8e, 0xd4,
	0x2d, 0x7d, 0xfa, 0xac, 0x48, 0xad, 0x01, 0xd8, 0x58, 0x38, 0xfc, 0x2e, 0xf5, 0x99, 0x87, 0x7e,
	0x97, 0x97, 0xb9, 0xb1, 0x85, 0xeb, 0x8d, 0x6d, 0x1d, 0x5e, 0xc8, 0xdf, 0xfe, 0x98, 0x91, 0xf0,
	0x4e, 0x7c, 0xc7, 0x05, 0xb0, 0xf9, 0x0a, 0x32, 0xd3, 0x09, 0x09, 0x13, 0x26, 0xc1, 0xdc, 0x8c,
	0x6c, 0x9f, 0x88, 0x3b, 0x89, 0x94, 0x4d, 0xb0, 0xc6, 0x60, 0x28, 0x88, 0x43, 0x18, 0x0c, 0x44,
	0x1a, 0xd2, 0xaa, 0xde, 0x99, 0x4d, 0x94, 0xad, 0x05, 0x97, 0x1d, 0xca, 0x7d, 0xca, 0xf3, 0xc7,
	0x16, 0x77, 0x87, 0xf9, 0xa0, 0xbd, 0x81, 0xde, 0x0b, 0xd7, 0x0d, 0x11, 0xe7, 0xc6, 0x22, 0x8b,
	0x0c, 0xc1, 0xff, 0x02, 0x32, 0x8b, 0xa7, 0x4a, 0x2d, 0x4e, 0x30, 0xb7, 0x7c, 0xc8, 0xd2, 0x7c,
	0xaf, 0x6d, 0x6f, 0x5f, 0x09, 0xdf, 0x79, 0x46, 0xce, 0x52, 0x78, 0xe1, 0x94, 0x07, 0x90, 0x19,
	0xeb, 0xe2, 0x52, 0xa7, 0xf5, 0x5d, 0x02, 0x20, 0x09, 0x13, 0x15, 0xf0, 0x1f, 0x4c, 0xf5, 0x7c,
	0x66, 0x8b, 0x7f, 0x63, 0x66, 0xf5, 0xfe, 0xd7, 0x69, 0x43, 0x3a, 0x99, 0x36, 0xa4, 0x9f, 0xd3,
	0x86, 0xf4, 0xe1, 0xb4, 0xb1, 0x74, 0x72, 0xda, 0x58, 0xfa, 0x76, 0xda, 0x58, 0x7a, 0xdb, 0xb9,
	0x05, 0xf9, 0xf9, 0xfd, 0x98, 0xba, 0x64, 0x57, 0xd2, 0xfb, 0xf0, 0xc9, 0xaf, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xf2, 0x01, 0x11, 0x45, 0xb9, 0x05, 0x00, 0x00,
}

func (m *SigningPsbtStarted) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SigningPsbtStarted) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SigningPsbtStarted) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Psbt) > 0 {
		i -= len(m.Psbt)
		copy(dAtA[i:], m.Psbt)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Psbt)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.RequestingModule) > 0 {
		i -= len(m.RequestingModule)
		copy(dAtA[i:], m.RequestingModule)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.RequestingModule)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.PubKeys) > 0 {
		keysForPubKeys := make([]string, 0, len(m.PubKeys))
		for k := range m.PubKeys {
			keysForPubKeys = append(keysForPubKeys, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForPubKeys)
		for iNdEx := len(keysForPubKeys) - 1; iNdEx >= 0; iNdEx-- {
			v := m.PubKeys[string(keysForPubKeys[iNdEx])]
			baseI := i
			if len(v) > 0 {
				i -= len(v)
				copy(dAtA[i:], v)
				i = encodeVarintEvents(dAtA, i, uint64(len(v)))
				i--
				dAtA[i] = 0x12
			}
			i -= len(keysForPubKeys[iNdEx])
			copy(dAtA[i:], keysForPubKeys[iNdEx])
			i = encodeVarintEvents(dAtA, i, uint64(len(keysForPubKeys[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintEvents(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.KeyID) > 0 {
		i -= len(m.KeyID)
		copy(dAtA[i:], m.KeyID)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.KeyID)))
		i--
		dAtA[i] = 0x22
	}
	if m.SigID != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.SigID))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Module) > 0 {
		i -= len(m.Module)
		copy(dAtA[i:], m.Module)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Module)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SigningPsbtCompleted) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SigningPsbtCompleted) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SigningPsbtCompleted) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SigID != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.SigID))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Module) > 0 {
		i -= len(m.Module)
		copy(dAtA[i:], m.Module)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Module)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SigningPsbtExpired) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SigningPsbtExpired) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SigningPsbtExpired) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SigID != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.SigID))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Module) > 0 {
		i -= len(m.Module)
		copy(dAtA[i:], m.Module)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Module)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TapScriptSigsSubmitted) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TapScriptSigsSubmitted) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TapScriptSigsSubmitted) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TapScriptSigsMap != nil {
		{
			size, err := m.TapScriptSigsMap.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Participant) > 0 {
		i -= len(m.Participant)
		copy(dAtA[i:], m.Participant)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Participant)))
		i--
		dAtA[i] = 0x1a
	}
	if m.SigID != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.SigID))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Module) > 0 {
		i -= len(m.Module)
		copy(dAtA[i:], m.Module)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Module)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *KeyRotated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeyRotated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeyRotated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.KeyID) > 0 {
		i -= len(m.KeyID)
		copy(dAtA[i:], m.KeyID)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.KeyID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Module) > 0 {
		i -= len(m.Module)
		copy(dAtA[i:], m.Module)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Module)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SigningPsbtStarted) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Module)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.SigID != 0 {
		n += 1 + sovEvents(uint64(m.SigID))
	}
	l = len(m.KeyID)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if len(m.PubKeys) > 0 {
		for k, v := range m.PubKeys {
			_ = k
			_ = v
			l = 0
			if len(v) > 0 {
				l = 1 + len(v) + sovEvents(uint64(len(v)))
			}
			mapEntrySize := 1 + len(k) + sovEvents(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovEvents(uint64(mapEntrySize))
		}
	}
	l = len(m.RequestingModule)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Psbt)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *SigningPsbtCompleted) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Module)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.SigID != 0 {
		n += 1 + sovEvents(uint64(m.SigID))
	}
	return n
}

func (m *SigningPsbtExpired) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Module)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.SigID != 0 {
		n += 1 + sovEvents(uint64(m.SigID))
	}
	return n
}

func (m *TapScriptSigsSubmitted) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Module)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.SigID != 0 {
		n += 1 + sovEvents(uint64(m.SigID))
	}
	l = len(m.Participant)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.TapScriptSigsMap != nil {
		l = m.TapScriptSigsMap.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *KeyRotated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Module)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.KeyID)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func sovEvents(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SigningPsbtStarted) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SigningPsbtStarted: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SigningPsbtStarted: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Module", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Module = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = github_com_scalarorg_scalar_core_x_nexus_exported.ChainName(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SigID", wireType)
			}
			m.SigID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SigID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyID = github_com_scalarorg_scalar_core_x_multisig_exported.KeyID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKeys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PubKeys == nil {
				m.PubKeys = make(map[string]github_com_scalarorg_scalar_core_x_multisig_exported.PublicKey)
			}
			var mapkey string
			mapvalue := []byte{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEvents
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEvents
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthEvents
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthEvents
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapbyteLen uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEvents
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapbyteLen |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intMapbyteLen := int(mapbyteLen)
					if intMapbyteLen < 0 {
						return ErrInvalidLengthEvents
					}
					postbytesIndex := iNdEx + intMapbyteLen
					if postbytesIndex < 0 {
						return ErrInvalidLengthEvents
					}
					if postbytesIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = make([]byte, mapbyteLen)
					copy(mapvalue, dAtA[iNdEx:postbytesIndex])
					iNdEx = postbytesIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipEvents(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthEvents
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.PubKeys[mapkey] = ((github_com_scalarorg_scalar_core_x_multisig_exported.PublicKey)(mapvalue))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestingModule", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestingModule = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Psbt", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Psbt = append(m.Psbt[:0], dAtA[iNdEx:postIndex]...)
			if m.Psbt == nil {
				m.Psbt = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SigningPsbtCompleted) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SigningPsbtCompleted: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SigningPsbtCompleted: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Module", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Module = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SigID", wireType)
			}
			m.SigID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SigID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SigningPsbtExpired) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SigningPsbtExpired: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SigningPsbtExpired: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Module", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Module = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SigID", wireType)
			}
			m.SigID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SigID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TapScriptSigsSubmitted) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TapScriptSigsSubmitted: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TapScriptSigsSubmitted: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Module", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Module = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SigID", wireType)
			}
			m.SigID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SigID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Participant", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Participant = append(m.Participant[:0], dAtA[iNdEx:postIndex]...)
			if m.Participant == nil {
				m.Participant = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TapScriptSigsMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TapScriptSigsMap == nil {
				m.TapScriptSigsMap = &exported.TapScriptSigsMap{}
			}
			if err := m.TapScriptSigsMap.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KeyRotated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeyRotated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeyRotated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Module", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Module = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = github_com_scalarorg_scalar_core_x_nexus_exported.ChainName(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyID = github_com_scalarorg_scalar_core_x_multisig_exported.KeyID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvents = fmt.Errorf("proto: unexpected end of group")
)
