// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: scalar/chains/v1beta1/tokens.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/codec/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/regen-network/cosmos-proto"
	github_com_scalarorg_scalar_core_x_nexus_exported "github.com/scalarorg/scalar-core/x/nexus/exported"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ERC20TokenMetadata struct {
	Asset        string                                 `protobuf:"bytes,1,opt,name=asset,proto3" json:"asset,omitempty"`
	ChainID      github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=chain_id,json=chainId,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"chain_id"`
	Details      TokenDetails                           `protobuf:"bytes,3,opt,name=details,proto3" json:"details"`
	TokenAddress Address                                `protobuf:"bytes,4,opt,name=token_address,json=tokenAddress,proto3,customtype=Address" json:"token_address"`
	TxHash       Hash                                   `protobuf:"bytes,5,opt,name=tx_hash,json=txHash,proto3,customtype=Hash" json:"tx_hash"`
	Status       Status                                 `protobuf:"varint,7,opt,name=status,proto3,enum=scalar.chains.v1beta1.Status" json:"status,omitempty"`
	IsExternal   bool                                   `protobuf:"varint,8,opt,name=is_external,json=isExternal,proto3" json:"is_external,omitempty"`
	BurnerCode   []byte                                 `protobuf:"bytes,9,opt,name=burner_code,json=burnerCode,proto3" json:"burner_code,omitempty"`
}

func (m *ERC20TokenMetadata) Reset()         { *m = ERC20TokenMetadata{} }
func (m *ERC20TokenMetadata) String() string { return proto.CompactTextString(m) }
func (*ERC20TokenMetadata) ProtoMessage()    {}
func (*ERC20TokenMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d8df3d2e6429893, []int{0}
}
func (m *ERC20TokenMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ERC20TokenMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ERC20TokenMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ERC20TokenMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ERC20TokenMetadata.Merge(m, src)
}
func (m *ERC20TokenMetadata) XXX_Size() int {
	return m.Size()
}
func (m *ERC20TokenMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_ERC20TokenMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_ERC20TokenMetadata proto.InternalMessageInfo

// ERC20Deposit contains information for an ERC20 deposit
type ERC20Deposit struct {
	TxID             Hash                                                        `protobuf:"bytes,1,opt,name=tx_id,json=txId,proto3,customtype=Hash" json:"tx_id"`
	Amount           github_com_cosmos_cosmos_sdk_types.Uint                     `protobuf:"bytes,2,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"amount"`
	Asset            string                                                      `protobuf:"bytes,3,opt,name=asset,proto3" json:"asset,omitempty"`
	DestinationChain github_com_scalarorg_scalar_core_x_nexus_exported.ChainName `protobuf:"bytes,4,opt,name=destination_chain,json=destinationChain,proto3,casttype=github.com/scalarorg/scalar-core/x/nexus/exported.ChainName" json:"destination_chain,omitempty"`
	BurnerAddress    Address                                                     `protobuf:"bytes,5,opt,name=burner_address,json=burnerAddress,proto3,customtype=Address" json:"burner_address"`
	LogIndex         uint64                                                      `protobuf:"varint,6,opt,name=log_index,json=logIndex,proto3" json:"log_index,omitempty"`
}

func (m *ERC20Deposit) Reset()         { *m = ERC20Deposit{} }
func (m *ERC20Deposit) String() string { return proto.CompactTextString(m) }
func (*ERC20Deposit) ProtoMessage()    {}
func (*ERC20Deposit) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d8df3d2e6429893, []int{1}
}
func (m *ERC20Deposit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ERC20Deposit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ERC20Deposit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ERC20Deposit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ERC20Deposit.Merge(m, src)
}
func (m *ERC20Deposit) XXX_Size() int {
	return m.Size()
}
func (m *ERC20Deposit) XXX_DiscardUnknown() {
	xxx_messageInfo_ERC20Deposit.DiscardUnknown(m)
}

var xxx_messageInfo_ERC20Deposit proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ERC20TokenMetadata)(nil), "scalar.chains.v1beta1.ERC20TokenMetadata")
	proto.RegisterType((*ERC20Deposit)(nil), "scalar.chains.v1beta1.ERC20Deposit")
}

func init() {
	proto.RegisterFile("scalar/chains/v1beta1/tokens.proto", fileDescriptor_9d8df3d2e6429893)
}

var fileDescriptor_9d8df3d2e6429893 = []byte{
	// 600 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0x4f, 0x6f, 0xd3, 0x3e,
	0x18, 0xc7, 0x9b, 0x2d, 0x6d, 0x3a, 0xaf, 0xdb, 0x6f, 0x3f, 0x6b, 0x48, 0xd9, 0x10, 0x49, 0x18,
	0x02, 0xc2, 0x61, 0x09, 0x1b, 0x7f, 0x24, 0xc4, 0x01, 0xd1, 0x76, 0x82, 0x20, 0x8d, 0x83, 0x19,
	0x17, 0x2e, 0x91, 0x1b, 0x9b, 0x34, 0x5a, 0x6a, 0x57, 0xb1, 0x83, 0xb2, 0x77, 0xc1, 0x5b, 0xe0,
	0xdd, 0xec, 0xb8, 0x23, 0x02, 0xa9, 0x82, 0xee, 0x5d, 0x70, 0x42, 0x71, 0x5c, 0x51, 0x09, 0x26,
	0xed, 0x14, 0x3f, 0x4f, 0x3e, 0x7e, 0xfc, 0xcd, 0xf7, 0xeb, 0x80, 0x3d, 0x91, 0xe0, 0x1c, 0x17,
	0x61, 0x32, 0xc6, 0x19, 0x13, 0xe1, 0xa7, 0x83, 0x11, 0x95, 0xf8, 0x20, 0x94, 0xfc, 0x94, 0x32,
	0x11, 0x4c, 0x0b, 0x2e, 0x39, 0xbc, 0xd1, 0x30, 0x41, 0xc3, 0x04, 0x9a, 0xd9, 0xdd, 0x49, 0x39,
	0x4f, 0x73, 0x1a, 0x2a, 0x68, 0x54, 0x7e, 0x0c, 0x31, 0x3b, 0x6b, 0x76, 0xec, 0x6e, 0xa7, 0x3c,
	0xe5, 0x6a, 0x19, 0xd6, 0x2b, 0xdd, 0xdd, 0x49, 0xb8, 0x98, 0x70, 0x11, 0x37, 0x2f, 0x9a, 0x42,
	0xbf, 0xba, 0x7d, 0x85, 0x8c, 0xb3, 0x29, 0xd5, 0xc8, 0xde, 0x97, 0x55, 0x00, 0x8f, 0xd0, 0xe0,
	0xf0, 0xe1, 0x49, 0xad, 0xed, 0x98, 0x4a, 0x4c, 0xb0, 0xc4, 0x70, 0x1b, 0xb4, 0xb1, 0x10, 0x54,
	0xda, 0x86, 0x67, 0xf8, 0x6b, 0xa8, 0x29, 0xe0, 0x09, 0xe8, 0xaa, 0x51, 0x71, 0x46, 0xec, 0x15,
	0xcf, 0xf0, 0x7b, 0xfd, 0x67, 0xe7, 0x33, 0xb7, 0xf5, 0x6d, 0xe6, 0xde, 0x4b, 0x33, 0x39, 0x2e,
	0x47, 0x41, 0xc2, 0x27, 0x5a, 0x82, 0x7e, 0xec, 0x0b, 0x72, 0xaa, 0x0f, 0x8c, 0x98, 0x9c, 0xcf,
	0x5c, 0x6b, 0x50, 0x4f, 0x88, 0x86, 0xc8, 0x52, 0xa3, 0x22, 0x02, 0x07, 0xc0, 0x22, 0x54, 0xe2,
	0x2c, 0x17, 0xf6, 0xaa, 0x67, 0xf8, 0xeb, 0x87, 0x77, 0x82, 0x7f, 0x5a, 0x13, 0x28, 0x89, 0xc3,
	0x06, 0xed, 0x9b, 0xf5, 0xc9, 0x68, 0xb1, 0x13, 0x3e, 0x06, 0x1b, 0xca, 0xdd, 0x18, 0x13, 0x52,
	0x50, 0x21, 0x6c, 0xb3, 0x16, 0xde, 0xff, 0x4f, 0xeb, 0xb3, 0x5e, 0x36, 0x6d, 0xd4, 0x53, 0x94,
	0xae, 0xe0, 0x5d, 0x60, 0xc9, 0x2a, 0x1e, 0x63, 0x31, 0xb6, 0xdb, 0x8a, 0xef, 0x69, 0xde, 0x7c,
	0x8d, 0xc5, 0x18, 0x75, 0x64, 0x55, 0x3f, 0xe1, 0x13, 0xd0, 0x11, 0x12, 0xcb, 0x52, 0xd8, 0x96,
	0x67, 0xf8, 0x9b, 0x87, 0xb7, 0xae, 0x10, 0xf8, 0x4e, 0x41, 0x48, 0xc3, 0xd0, 0x05, 0xeb, 0x99,
	0x88, 0x69, 0x25, 0x69, 0xc1, 0x70, 0x6e, 0x77, 0x3d, 0xc3, 0xef, 0x22, 0x90, 0x89, 0x23, 0xdd,
	0xa9, 0x81, 0x51, 0x59, 0x30, 0x5a, 0xc4, 0x09, 0x27, 0xd4, 0x5e, 0xab, 0x2d, 0x45, 0xa0, 0x69,
	0x0d, 0x38, 0xa1, 0x6f, 0xcc, 0x6e, 0x67, 0xcb, 0xda, 0xfb, 0xbe, 0x02, 0x7a, 0x2a, 0xa3, 0x21,
	0x9d, 0x72, 0x91, 0x49, 0xf8, 0x00, 0xb4, 0x65, 0x55, 0x87, 0x60, 0xa8, 0x10, 0xb6, 0x97, 0x45,
	0xcf, 0x67, 0xae, 0x79, 0x52, 0x45, 0x43, 0x64, 0xca, 0x2a, 0x22, 0xf0, 0x15, 0xe8, 0xe0, 0x09,
	0x2f, 0x99, 0xd4, 0x81, 0x85, 0x9a, 0xbd, 0x7f, 0x8d, 0xc0, 0xde, 0x67, 0x4c, 0x22, 0xbd, 0xfd,
	0xcf, 0x8d, 0x58, 0x5d, 0xbe, 0x11, 0x39, 0xf8, 0x9f, 0x50, 0x21, 0x33, 0x86, 0x65, 0xc6, 0x59,
	0xac, 0xfc, 0xd0, 0xd6, 0xbf, 0xf8, 0x35, 0x73, 0x9f, 0x2f, 0x9d, 0xd2, 0x58, 0xc6, 0x8b, 0x54,
	0xaf, 0xf6, 0x13, 0x5e, 0xd0, 0xb0, 0x0a, 0x19, 0xad, 0x4a, 0x11, 0xd2, 0x6a, 0xca, 0x0b, 0x49,
	0x49, 0xa0, 0xae, 0xc7, 0x5b, 0x3c, 0xa1, 0x68, 0x6b, 0x69, 0xb2, 0xea, 0xc2, 0xa7, 0x60, 0x53,
	0xfb, 0xb5, 0x48, 0xb9, 0xad, 0x3e, 0xea, 0xaf, 0x94, 0x37, 0x1a, 0x6c, 0x11, 0xf3, 0x4d, 0xb0,
	0x96, 0xf3, 0x34, 0xce, 0x18, 0xa1, 0x95, 0xdd, 0xf1, 0x0c, 0xdf, 0x44, 0xdd, 0x9c, 0xa7, 0x51,
	0x5d, 0xf7, 0x8f, 0xcf, 0x7f, 0x3a, 0xad, 0xf3, 0xb9, 0x63, 0x5c, 0xcc, 0x1d, 0xe3, 0xc7, 0xdc,
	0x31, 0x3e, 0x5f, 0x3a, 0xad, 0x8b, 0x4b, 0xa7, 0xf5, 0xf5, 0xd2, 0x69, 0x7d, 0x08, 0xaf, 0xf1,
	0x05, 0xfa, 0xf7, 0x52, 0xa6, 0x8d, 0x3a, 0xea, 0xbf, 0x7a, 0xf4, 0x3b, 0x00, 0x00, 0xff, 0xff,
	0x3a, 0x7f, 0x7e, 0x42, 0x03, 0x04, 0x00, 0x00,
}

func (m *ERC20TokenMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ERC20TokenMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ERC20TokenMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BurnerCode) > 0 {
		i -= len(m.BurnerCode)
		copy(dAtA[i:], m.BurnerCode)
		i = encodeVarintTokens(dAtA, i, uint64(len(m.BurnerCode)))
		i--
		dAtA[i] = 0x4a
	}
	if m.IsExternal {
		i--
		if m.IsExternal {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.Status != 0 {
		i = encodeVarintTokens(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x38
	}
	{
		size := m.TxHash.Size()
		i -= size
		if _, err := m.TxHash.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTokens(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.TokenAddress.Size()
		i -= size
		if _, err := m.TokenAddress.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTokens(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.Details.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTokens(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.ChainID.Size()
		i -= size
		if _, err := m.ChainID.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTokens(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Asset) > 0 {
		i -= len(m.Asset)
		copy(dAtA[i:], m.Asset)
		i = encodeVarintTokens(dAtA, i, uint64(len(m.Asset)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ERC20Deposit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ERC20Deposit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ERC20Deposit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LogIndex != 0 {
		i = encodeVarintTokens(dAtA, i, uint64(m.LogIndex))
		i--
		dAtA[i] = 0x30
	}
	{
		size := m.BurnerAddress.Size()
		i -= size
		if _, err := m.BurnerAddress.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTokens(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.DestinationChain) > 0 {
		i -= len(m.DestinationChain)
		copy(dAtA[i:], m.DestinationChain)
		i = encodeVarintTokens(dAtA, i, uint64(len(m.DestinationChain)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Asset) > 0 {
		i -= len(m.Asset)
		copy(dAtA[i:], m.Asset)
		i = encodeVarintTokens(dAtA, i, uint64(len(m.Asset)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTokens(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.TxID.Size()
		i -= size
		if _, err := m.TxID.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTokens(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintTokens(dAtA []byte, offset int, v uint64) int {
	offset -= sovTokens(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ERC20TokenMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Asset)
	if l > 0 {
		n += 1 + l + sovTokens(uint64(l))
	}
	l = m.ChainID.Size()
	n += 1 + l + sovTokens(uint64(l))
	l = m.Details.Size()
	n += 1 + l + sovTokens(uint64(l))
	l = m.TokenAddress.Size()
	n += 1 + l + sovTokens(uint64(l))
	l = m.TxHash.Size()
	n += 1 + l + sovTokens(uint64(l))
	if m.Status != 0 {
		n += 1 + sovTokens(uint64(m.Status))
	}
	if m.IsExternal {
		n += 2
	}
	l = len(m.BurnerCode)
	if l > 0 {
		n += 1 + l + sovTokens(uint64(l))
	}
	return n
}

func (m *ERC20Deposit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TxID.Size()
	n += 1 + l + sovTokens(uint64(l))
	l = m.Amount.Size()
	n += 1 + l + sovTokens(uint64(l))
	l = len(m.Asset)
	if l > 0 {
		n += 1 + l + sovTokens(uint64(l))
	}
	l = len(m.DestinationChain)
	if l > 0 {
		n += 1 + l + sovTokens(uint64(l))
	}
	l = m.BurnerAddress.Size()
	n += 1 + l + sovTokens(uint64(l))
	if m.LogIndex != 0 {
		n += 1 + sovTokens(uint64(m.LogIndex))
	}
	return n
}

func sovTokens(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTokens(x uint64) (n int) {
	return sovTokens(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ERC20TokenMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTokens
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ERC20TokenMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ERC20TokenMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokens
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTokens
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTokens
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Asset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokens
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTokens
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTokens
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ChainID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokens
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTokens
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTokens
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Details.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokens
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTokens
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTokens
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TokenAddress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokens
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTokens
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTokens
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TxHash.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokens
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsExternal", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokens
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsExternal = bool(v != 0)
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurnerCode", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokens
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTokens
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTokens
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BurnerCode = append(m.BurnerCode[:0], dAtA[iNdEx:postIndex]...)
			if m.BurnerCode == nil {
				m.BurnerCode = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTokens(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTokens
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ERC20Deposit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTokens
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ERC20Deposit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ERC20Deposit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokens
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTokens
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTokens
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TxID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokens
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTokens
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTokens
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokens
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTokens
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTokens
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Asset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokens
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTokens
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTokens
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationChain = github_com_scalarorg_scalar_core_x_nexus_exported.ChainName(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurnerAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokens
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTokens
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTokens
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BurnerAddress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogIndex", wireType)
			}
			m.LogIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokens
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LogIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTokens(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTokens
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTokens(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTokens
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTokens
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTokens
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTokens
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTokens
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTokens
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTokens        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTokens          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTokens = fmt.Errorf("proto: unexpected end of group")
)
