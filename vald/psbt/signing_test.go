package psbt_test

import (
	"encoding/hex"
	"fmt"
	"testing"

	"github.com/scalarorg/bitcoin-vault/ffi/go-vault"
	"github.com/scalarorg/bitcoin-vault/go-utils/types"
	covenant "github.com/scalarorg/scalar-core/x/covenant/exported"
)

// CGO_LDFLAGS="-L./lib -lbitcoin_vault_ffi" CGO_CFLAGS="-I./lib" go test -timeout 10m -run ^TestSignPsbt$ github.com/scalarorg/scalar-core/vald/psbt -v -count=1
func TestSignPsbt(t *testing.T) {
	psbtBytes := mustDecodeHex("70736274ff01006b020000000191c2407618522f0f2741090fb541a1945ec57d6ef1e56c169b6c094932df19290000000000fdffffff020000000000000000106a0e5343414c41520101417472616e73e50200000000000016001450dceca158a9c872eb405d52293d351110572c9e000000000001012be8030000000000002251209ec8dc148990200705b97d6ee201362936d7f9ce80926c7a3e1bdb33382aeda60103040000000041142ae31ea8709aeda8194ba3e2f7e7e95e680e8b65135c8983c0a298d17bc5350abfbe5929c41e60294ee315d057bdf5804beae58e399b040597fe0073837d370a4046dc2b334b1fd4e09e88fc9ec86eba1d170219f05c6a894607092eb4ce9c6c88ac1de7ab642862d218d413a31139918fb313a285fb7b784f66312d0882ba84be6215c150929b74c1a04954b78b4b6035e97a5e078a5a0f28ec96d547bfee9ace803ac01f1e0ba48405ef2db77d68d0e6aa10c28609b69487e89aae8b711045068e496db835c6dc4a9fa6e96baf5f5192244dc0d0cb610e6fb838c419ffddd00efeab7aad202ae31ea8709aeda8194ba3e2f7e7e95e680e8b65135c8983c0a298d17bc5350aad2015da913b3e87b4932b1e1b87d9667c28e7250aa0ed60b3a31095f541e1641488ac20594e78c0a2968210d9c1550d4ad31b03d5e4b9659cf2f67842483bb3c2bb7811ba20b59e575cef873ea95273afd55956c84590507200d410e693e4b079a426cc6102ba20f0f3d9beaf7a3945bcaa147e041ae1d5ca029bde7e40d8251f0783d6ecbe8fb5ba53a2c0211615da913b3e87b4932b1e1b87d9667c28e7250aa0ed60b3a31095f541e16414882501bfbe5929c41e60294ee315d057bdf5804beae58e399b040597fe0073837d370a0000000021162ae31ea8709aeda8194ba3e2f7e7e95e680e8b65135c8983c0a298d17bc5350a2501bfbe5929c41e60294ee315d057bdf5804beae58e399b040597fe0073837d370a000000002116594e78c0a2968210d9c1550d4ad31b03d5e4b9659cf2f67842483bb3c2bb78112501bfbe5929c41e60294ee315d057bdf5804beae58e399b040597fe0073837d370a000000002116b59e575cef873ea95273afd55956c84590507200d410e693e4b079a426cc61022501bfbe5929c41e60294ee315d057bdf5804beae58e399b040597fe0073837d370a000000002116f0f3d9beaf7a3945bcaa147e041ae1d5ca029bde7e40d8251f0783d6ecbe8fb52501bfbe5929c41e60294ee315d057bdf5804beae58e399b040597fe0073837d370a0000000001172050929b74c1a04954b78b4b6035e97a5e078a5a0f28ec96d547bfee9ace803ac00118204e6c5aba100167b13a7a291b09ad74ece13a54ad3f920e0438f6156c47e4a860000000")

	privKeyBytes := mustDecodeHex("f7981df190cd4e8009a5472adf3d6318dee2290698d2ad723e300fbdf80ea81c")

	tapScriptSigs, err := vault.SignPsbtAndCollectSigs(
		psbtBytes,
		privKeyBytes,
		types.NetworkKindTestnet,
	)

	if err != nil {
		t.Fatalf("failed to sign PSBT: %s", err)
	}

	fmt.Println(tapScriptSigs)

	mapOfTapScriptSigs := covenant.NewTapScriptSigsMapFromRaw(tapScriptSigs)

	fmt.Println(mapOfTapScriptSigs)
}

func mustDecodeHex(hexStr string) []byte {
	bytes, err := hex.DecodeString(hexStr)
	if err != nil {
		panic(fmt.Sprintf("failed to decode hex: %s", err))
	}
	return bytes
}
